version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: cortex
      POSTGRES_PASSWORD: cortex_pass
      POSTGRES_DB: cortex
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cortex"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: cortex
      MINIO_ROOT_PASSWORD: cortex_pass
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  gateway:
    image: brunolaureano/cortexdb-gateway:latest
    environment:
      CORTEXDB_ADMIN_KEY: ${CORTEXDB_ADMIN_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      GEMINI_EMBEDDING_MODEL: models/text-embedding-004
      GEMINI_VISION_MODEL: models/gemini-1.5-flash
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      minio:
        condition: service_healthy
    restart: unless-stopped

  studio:
    image: brunolaureano/cortexdb-studio:latest
    environment:
      CORTEX_GATEWAY_URL: http://gateway:8000
      NEXT_PUBLIC_GATEWAY_URL: http://localhost:8000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      gateway:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  qdrant_data:
  minio_data:

